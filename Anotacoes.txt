Ambiente
    Microsoft SQL Server 18; link: https://learn.microsoft.com/pt-br/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15
        não esquecer de baixar o SQL Server junto do management
    .net sdk 5.0.408; link: https://dotnet.microsoft.com/en-us/download/dotnet/5.0

--checando versão .net
    dotnet --list-sdks
    dotnet --version

--criando a solução
    dotnet new sln

--criando projeto API
    dotnet new webAPI -o Manager.API

--crinado class
    dotnet new classlib -o Manager.Domain

--incluindo no projeto o Pocote do Fluent Validation
    --tem que executar comando na camada que ele irá atuar
    dotnet add package fluentvalidation

--limpar o projeto para quando der erro, isso atualizar as dll de cache
    dotnet clean

--vendo se tem erro na camada da API
    dotnet build

--rodar API 
    dotnet run
    --caminho: https://localhost:5001/swagger/index.html

--instalando o EntityFrameworkCore para version
    //tem que fazer dentro da pasta que irá atuar o contexto, nesse caso na Infra.
    //com o dotnet 5 e aconselhado usar a versão 5.0.1
    dotnet add package Microsoft.EntityFrameworkCore -v 5.0.1

--adicionando as pastas na solução
    --entra na pasta que sera adicionada para executar o comando
    dotnet sln ..\..\Manager.sln add .\Manager.Domain.csproj

--pacotes para ligação entre banco e classes - Mapping
    --entra na pasta que sera adicionada para executar o comando nesse caso Infra
    --SQl Server
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer -v 5.0.1
    --MySQL -- versão certa para o .Net 5.0
    dotnet add package Pomelo.EntityFrameworkCore.MySql -v 5.0.0-alpha.2
    --Oracle
    dotnet add package Oracle.EntityFrameworkCore -Version 3.19.80
    --mais casos vai no portal da nuget na parte de packages e procura a package do banco usado

    --depois instalar o Design -compativel
    dotnet add package Microsoft.EntityFrameworkCore.Design -v 5.0.1

    --depois o Tools para usar na migrations - compativel
    dotnet add package Microsoft.EntityFrameworkCore.Tools -v 5.0.1


--adicionar um projeto ao outro - referenciando
    --entra na pasta que sera adicionada para executar o comando
    dotnet add .\Manager.Infra.csproj reference '..\2-Manager.Domain\Manager.Domain.csproj'

--como fazer downgrade
    vai no arquivo Manager.Infra.csproj e muda o TargetFramework: exemplo: netcoreapp3.0

--para pegar string de conexao para dotnet
    https://www.connectionstrings.com/

--iniciando as migrations --na pasta INFRA
    dotnet ef migrations add InitialMigration


--migrations
    --pacote global do EF Core para fazer as migrations
        dotnet tool install --global dotnet-ef --version 5.0.1
    --fazendo as migrations inicial (InitialMigration é boas praticas, pode ser qualquer nome, sempre que fizer mudar o nome)
        dotnet ef migrations add InitialMigration
    --refletindo no banco de dados as migrations
        dotnet ef database update


--adicionando o automapper
    dotnet add package automapper


--jwt
    --pacotes do jwt (dentro da pasta que sera usado)
    dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 5.0.2

    dotnet add package Microsoft.AspNetCore.Authentication.OpenIdConnect --version 5.0.2

    --validando token
    https://jwt.io/

    --usando a authorize da API com o novo swagger
    na chave tem que colocar "Bearer" depois da chave criado no /api/v1/auth/login

--Azure Key Vault (user secrets 5.0.17)   
    --local onde fica
    %APPDATA%\Microsoft\UserSecrets\secrets.json

    --iniciando
    dotnet user-secrets init --project .\Manager.API.csproj
    --listando (irá criar o primeiro junto)
    dotnet user-secrets list --project .\Manager.API.csproj
    --criando as conteudo do chave (cuidado com excesso de barras quando o set acontecer)
    dotnet user-secrets set "ConnectionStrings:USER_MANAGER" "Server=CLEOMILSON_NB\\SQLEXPRESS01;Database=usermanagerapi;Trusted_Connection=True;"
        // linha enviada para o user-secrets: "Server=CLEOMILSON_NB\\SQLEXPRESS01;Database=usermanagerapi;Trusted_Connection=True;"

--package para pegar Encrypt e Descrypt (adicionado na camada de API e Service)
    dotnet add package EscNet --version 1.0.1
    adicionando no user-secrets
    dotnet user-secrets set "Cryptography:Key" "x5qWaAZU3jqSY6wV" --project .\Manager.API.csproj //a key deve ser divisivel por 8 e normal


--teste unitarios - XUnit
    --criandos os teste
    dotnet new xunit
    --adicionando o mock no projeto
    dotnet add package moq
    --instalando o bogus para criar dados falsos
    dotnet add package bogus
    --biblioteca fluentassertions, para fazer melhor os testes 
    dotnet add package fluentassertions

    --caso não pareça o RunTest por causa do intellisense 
        dotnet test